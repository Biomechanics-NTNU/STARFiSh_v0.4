import numpy as np
mmHg = 133.32
ml   = 1.E-6
class aorticFlowPressure:
    def __init__(self,dict=None):
        self.P=(np.array([59.748703,59.21006393,58.77924347,58.68598557,58.56132889,58.19873047,58.,58.20834732,58.46612167,58.49894333,58.55056,58.86115646,59.38972092,60.20804977,61.55934525,63.54513931,
        66.13232422,69.24417877,72.61852264,75.75039673,78.1856842,79.96791077,81.58865356,83.28868866,84.73806,85.691185,86.45778656,87.32050323,88.11868286,88.82275391,89.7722168,90.95822906,
        91.85267639,92.37859344,93.2009201,94.49983978,95.4710083,95.66868591,95.71930695,96.16589355,96.70955658,97.04360962,97.46047974,98.15912628,98.78253174,99.12332153,99.5238266,100.1882019,
        100.80374908,101.11575317,101.3398056,101.74858856,102.1770401,102.33340454,102.3870163,102.65335083,102.93245697,102.8817215,102.72433472,102.83217621,103.,102.85791016,102.56206512,102.40163422,
        102.20233917,101.77002716,101.38539886,101.23210907,100.90550232,100.03505707,98.90371704,97.97415924,97.14794159,96.03135681,94.65849304,93.33758545,92.17210388,91.31345367,91.10023499,
        91.44527435,91.73724365,91.70088196,91.65348816,91.72126007,91.59654236,91.21279144,90.89335632,90.69773865,90.31148529,89.71736908,89.29702759,89.10055542,88.70384979,88.00479126,87.44192505,
        87.17575073,86.82620239,86.25839233,85.84861755,85.759552,85.62191772,85.17253113,84.68881226,84.45466614,84.23080444,83.70695496,83.07068634,82.63977051,82.33853149,81.95477295,81.49384308,
        81.00909424,80.47218323,79.91949463,79.47015381,79.17690277,78.91777802,78.5065918,77.99209595,77.57806396,77.19693756,76.70054626,76.2987442,76.11629486,75.79167938,75.14682007,74.59082794,
        74.38913727,74.21029663,73.802948,73.49802399,73.56944275,73.6668396,73.42115784,73.10015869,73.09012604,73.1572113,72.84750366,72.33459473,72.15570068,72.22373199,71.97691345,71.47439575,
        71.27683258,71.32617188,71.0978241,70.66287231,70.47463989,70.39766693,70.05155945,69.68547821,69.62025452,69.52570343,69.17327118,68.94330597,68.99926758,68.94168854,68.58224487,68.2429657,
        68.08455658,67.82564545,67.36247253,67.02955627,66.97631836,66.87657166,66.50645447,66.10359192,65.93362427,65.89177704,65.76425171,65.59511566,65.50985718,65.40985107,65.21063995,65.12498474,
        65.2480011,65.23026276,64.87709808,64.56626129,64.56851196,64.55371857,64.24664307,63.937397,63.87449646,63.81516266,63.59706879,63.45238113,63.47941971,63.45981979,63.29183578,63.11920929,
        62.99928284,62.77974701,62.42745209,62.16407776,62.07408142,61.92631912,61.572052,61.18768311,60.98543549,60.98543549,60.40344238,60.06829071]))*mmHg
        self.Q=np.array([-1.13414399e-02,7.05203865e-02,1.10421875e-02,-3.72688194e-02,-2.36012347e-03,2.59734502e-02,5.30803142e-03,-1.14860210e-02,5.70081612e-04,1.03467586e-02,3.13673368e-03,-2.73118928e-03,
        4.77777866e-01,4.48267523e+00,1.98300460e+01,5.48736500e+01,1.06812663e+02,1.58370787e+02,1.94873994e+02,2.21128993e+02,2.50711788e+02,2.82985806e+02,3.05357999e+02,3.15565765e+02,3.24355176e+02,
        3.36551275e+02,3.46545094e+02,3.51986980e+02,3.56939040e+02,3.62586179e+02,3.65914756e+02,3.66072539e+02,3.65330291e+02,3.65267601e+02,3.65503569e+02,3.65143154e+02,3.63609347e+02,3.60418823e+02,
        3.55250096e+02,3.48530832e+02,3.41435025e+02,3.34734961e+02,3.28126915e+02,3.21343424e+02,3.15392360e+02,3.11726548e+02,3.09785410e+02,3.06800996e+02,3.01617781e+02,2.96270786e+02,2.91911255e+02,
        2.87032140e+02,2.80966179e+02,2.74419765e+02,2.66924791e+02,2.58291096e+02,2.50243026e+02,2.43374546e+02,2.36065700e+02,2.27922789e+02,2.20247633e+02,2.12754976e+02,2.03899776e+02,1.94376558e+02,
        1.86241433e+02,1.78511170e+02,1.67950674e+02,1.54721770e+02,1.42442131e+02,1.31954428e+02,1.20191816e+02,1.05624670e+02,8.99448130e+01,7.39118100e+01,5.46959934e+01,3.02125270e+01,6.90450465e+00,
        -4.02035547e+00,-1.96486359e+00,1.87619850e+00,9.24511758e-01,-1.05814346e+00,-5.12078679e-01,6.10172853e-01,2.90450708e-01,-3.62760058e-01,-1.74940282e-01,2.08237183e-01,9.75935714e-02,-1.27903553e-01,
        -6.28784996e-02,6.97418991e-02,3.13458382e-02,-4.68446771e-02,-2.43492187e-02,2.15759908e-02,8.21941327e-03,-1.89322349e-02,-1.11795182e-02,4.69557952e-03,1.93522642e-05,-9.43925740e-03,-6.79744314e-03,
        -1.33980783e-03,-3.00678790e-03,-6.33169812e-03,-5.46170072e-03,-3.61552944e-03,-4.23928024e-03,-5.43779380e-03,-5.18203995e-03,-4.58787090e-03,-4.84996125e-03,
        -5.31130751e-03,-5.26849566e-03,-5.10836413e-03,-5.24507586e-03,-5.45086473e-03,-5.48187442e-03,-5.47221337e-03,-5.56545965e-03,-5.68265283e-03,-5.73925536e-03,-5.78175733e-03,-5.85993533e-03,-5.94641526e-03,
        -6.01188989e-03,-6.07247594e-03,-6.14543010e-03,-6.22126205e-03,-6.28981208e-03,-6.35666773e-03,-6.42781103e-03,-6.49995242e-03,-6.56956820e-03,-6.63859651e-03,-6.70911197e-03,-6.77997344e-03,-6.84995986e-03,
        -6.91974251e-03,-6.99003958e-03,-7.06045738e-03,-7.13057144e-03,-7.20061476e-03,-7.27083725e-03,-7.34110125e-03,-7.41125992e-03,-7.48139397e-03,-7.55158954e-03,-7.62180049e-03,-7.69197453e-03,-7.76213935e-03,
        -7.83232646e-03,-7.90251895e-03,-7.97269838e-03,-8.04287396e-03,-8.11305799e-03,-8.18324434e-03,-8.25342530e-03,-8.32360549e-03,-8.39378799e-03,-8.46397203e-03,-8.53415299e-03,-8.60433472e-03,-8.67451722e-03,
        -8.74469972e-03,-8.81488145e-03,-8.88506395e-03,-8.95524645e-03,-9.02542818e-03,-9.09561067e-03,-9.16579241e-03,-9.23597490e-03,-9.30615740e-03,-9.37633913e-03,-9.44652163e-03,-9.51670413e-03,-9.58688509e-03
        ,-9.65706836e-03,-9.72725009e-03,-9.79743182e-03,-9.86761432e-03,-9.93779682e-03,-1.00079786e-02,-1.00781610e-02,-1.01483435e-02,-1.02185253e-02,-1.02887078e-02,-1.03588895e-02,-1.04290720e-02,-1.04992545e-02,
        -1.05694362e-02,-1.06396187e-02,-1.07098012e-02,-1.07799822e-02,-1.08501647e-02,-1.09203480e-02,-1.09905289e-02,-1.10607114e-02,-1.11308939e-02,-1.12010757e-02,-1.12712582e-02,-1.13414399e-02])*ml
        self.t=np.array([0.,0.005,0.01,0.015,0.02,0.025,0.03,0.035,0.04,0.045,0.05,0.055,0.06,0.065,0.07,0.075,0.08,0.085,0.09,0.095,0.1,0.105,0.11,0.115,0.12,0.125,0.13,0.135,0.14,0.145,0.15,0.155,0.16,0.165,0.17,0.175,
        0.18,0.185,0.19,0.195,0.2,0.205,0.21,0.215,0.22,0.225,0.23,0.235,0.24,0.245,0.25,0.255,0.26,0.265,0.27,0.275,0.28,0.285,0.29,0.295,0.3,0.305,0.31,0.315,0.32,0.325,0.33,0.335,0.34,0.345,0.35,0.355,0.36,
        0.365,0.37,0.375,0.38,0.385,0.39,0.395,0.4,0.405,0.41,0.415,0.42,0.425,0.43,0.435,0.44,0.445,0.45,0.455,0.46,0.465,0.47,0.475,0.48,0.485,0.49,0.495,0.5,0.505,0.51,0.515,0.52,0.525,0.53,0.535,0.54,0.545,
        0.55,0.555,0.56,0.565,0.57,0.575,0.58,0.585,0.59,0.595,0.6,0.605,0.61,0.615,0.62,0.625,0.63,0.635,0.64,0.645,0.65,0.655,0.66,0.665,0.67,0.675,0.68,0.685,0.69,0.695,0.7,0.705,0.71,0.715,0.72,0.725,0.73,
        0.735,0.74,0.745,0.75,0.755,0.76,0.765,0.77,0.775,0.78,0.785,0.79,0.795,0.8,0.805,0.81,0.815,0.82,0.825,0.83,0.835,0.84,0.845,0.85,0.855,0.86,0.865,0.87,0.875,0.88,0.885,0.89,0.895,0.9,0.905,0.91,0.915,
        0.92,0.925,0.93,0.935,0.94,0.945,0.95,0.955,0.96,0.965,0.97,0.975,0.98,0.985,0.99,0.995,1.,1.005,1.01])
        self.dt=np.array([0.005])

if __name__ == "__main__":
    
    import matplotlib.pyplot as plt
    
    data = aorticFlowPressure()
    
    
    
    print "systolic Presssure",np.max(data.P/mmHg)
    print "diastolic Presssure",np.min(data.P/mmHg)
    print "mean Presssure",np.mean(data.P/mmHg)
    print "mean Presssure estimate",np.min(data.P/mmHg)+ (np.max(data.P/mmHg)-np.min(data.P/mmHg))/3.
    print "geometric mean pressure", np.sqrt(np.max(data.P/mmHg)*np.min(data.P/mmHg))
    print "mean Presssure estimate diff 2",np.min(data.P/mmHg)+ (np.max(data.P/mmHg)-np.min(data.P/mmHg))/2.
    
    print "mean flow", np.mean(data.Q/ml)
    
    print "resistance", np.mean(data.P/mmHg)/np.mean(data.Q/ml)
    
    ## wave split
    beta = 3.6
    r = 0.0147
    Ps = 100.*mmHg*np.ones_like(data.P)
    As = r**2.*np.pi*np.ones_like(data.P)
    rho = 1050.
    
    def A(P,beta,As,Ps):
        print P-Ps
        return As*( 1.0 + np.log( P/Ps ) / beta )**2.0
    def C(P,beta,As,Ps):
    #print P,'-',np.log( P/Ps)
        return 2.0* As / beta * ( 1.0 + np.log( P/Ps) / beta ) / P
    area = A(data.P,beta,As,Ps)
    waveSpeedHayashi = np.sqrt(area/(C(data.P,beta,As,Ps)*rho))
    
    Zo =  rho*waveSpeedHayashi/area
    
    ##calculateing dP and dQ
    pressureArray = data.P
    flowArray = data.Q
    dP = pressureArray[1::] - pressureArray[0:-1]      
    dQ = flowArray[1::] - flowArray[0:-1] 
    
    dP_div_Z = pressureArray[1::]/Zo[1::] - pressureArray[0:-1]/Zo[0:-1]
    dQ_multi_Z = flowArray[1::]*Zo[1::] - flowArray[0:-1]*Zo[0:-1]
    
    ## calculate dp_f, dp_b and dQ_f, dq_b     
    dp_f = (dP + dQ_multi_Z)/2.0 
    dp_b = (dP - dQ_multi_Z)/2.0
    dQ_f = (dQ + dP_div_Z)/2.0 
    dQ_b = (dQ - dP_div_Z)/2.0 
    
    p_f = np.cumsum(dp_f)
    p_b = np.cumsum(dp_b)
    q_f = np.cumsum(dQ_f)
    q_b = np.cumsum(dQ_b)  
    
    moveFB = False
    
    if moveFB == True:
    
        ax = plt.subplot(3,1,1)
        ax.plot(data.t,data.P/mmHg)
        ax.plot(data.t[:-1],(p_f+data.P[0])/mmHg)
        ax.plot(data.t[:-1],(p_b+data.P[0])/mmHg)
        
        ax = plt.subplot(3,1,2)
        ax.plot(data.t,data.Q/ml)
        ax.plot(data.t[:-1],(q_f+data.Q[0])/ml)
        ax.plot(data.t[:-1],(q_b+data.Q[0])/ml)
    
    else:
    
        ax = plt.subplot(3,1,1)
        ax.plot(data.t,(data.P-data.P[0])/mmHg)
        ax.plot(data.t[:-1],(p_f)/mmHg)
        ax.plot(data.t[:-1],(p_b)/mmHg)
    
        ax = plt.subplot(3,1,2)
        ax.plot(data.t,(data.Q-data.Q[0])/ml)
        ax.plot(data.t[:-1],(q_f)/ml)
        ax.plot(data.t[:-1],(q_b)/ml)
    
    ax = plt.subplot(3,1,3)
    ax.plot(data.t, np.sqrt(area/np.pi))
    plt.show()
    
    
